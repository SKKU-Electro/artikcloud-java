/**
 * ARTIK Cloud API
 * 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cloud.artik.api;

import cloud.artik.client.ApiException;
import cloud.artik.model.DeviceRegConfirmUserRequest;
import cloud.artik.model.DeviceRegConfirmUserResponseEnvelope;
import cloud.artik.model.DeviceRegStatusResponseEnvelope;
import cloud.artik.model.UnregisterDeviceResponseEnvelope;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RegistrationsApi
 */
public class RegistrationsApiTest {

    private final RegistrationsApi api = new RegistrationsApi();

    
    /**
     * Confirm User
     *
     * This call updates the registration request issued earlier by associating it with an authenticated user and captures all additional information required to add a new device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmUserTest() throws ApiException {
        DeviceRegConfirmUserRequest registrationInfo = null;
        // DeviceRegConfirmUserResponseEnvelope response = api.confirmUser(registrationInfo);

        // TODO: test validations
    }
    
    /**
     * Get Request Status For User
     *
     * This call checks the status of the request so users can poll and know when registration is complete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRequestStatusForUserTest() throws ApiException {
        String requestId = null;
        // DeviceRegStatusResponseEnvelope response = api.getRequestStatusForUser(requestId);

        // TODO: test validations
    }
    
    /**
     * Unregister Device
     *
     * This call clears any associations from the secure device registration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unregisterDeviceTest() throws ApiException {
        String deviceId = null;
        // UnregisterDeviceResponseEnvelope response = api.unregisterDevice(deviceId);

        // TODO: test validations
    }
    
}
