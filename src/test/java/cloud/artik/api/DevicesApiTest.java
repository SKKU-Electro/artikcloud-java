/**
 * ARTIK Cloud API
 * 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cloud.artik.api;

import static org.junit.Assert.*;
import cloud.artik.client.ApiException;
import cloud.artik.model.Device;
import cloud.artik.model.DeviceEnvelope;
import cloud.artik.model.DeviceTokenEnvelope;
import cloud.artik.model.PresenceEnvelope;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
public class DevicesApiTest extends ArtikCloudApiTest {
    protected DevicesApi api = null;

    @Before
    public void setUp() throws Exception {
        this.api = (DevicesApi) super.api(DevicesApi.class);
    }

    @After
    public void tearDown() throws Exception {
        this.api = null;
    }
    
    /**
     * Add Device
     *
     * Create a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDeviceTest() throws ApiException {
        Device device = null;
        // DeviceEnvelope response = api.addDevice(device);

        // TODO: test validations
    }
    
    /**
     * Delete Device
     *
     * Deletes a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String deviceId = null;
        // DeviceEnvelope response = api.deleteDevice(deviceId);

        // TODO: test validations
    }
    
    /**
     * Delete Device Token
     *
     * Deletes a device&#39;s token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTokenTest() throws ApiException {
        String deviceId = null;
        // DeviceTokenEnvelope response = api.deleteDeviceToken(deviceId);

        // TODO: test validations
    }
    
    /**
     * Get Device
     *
     * Retrieves a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String deviceId = null;
        // DeviceEnvelope response = api.getDevice(deviceId);

        // TODO: test validations
    }
    
    /**
     * Get device presence information
     *
     * Return the presence status of the given device along with the time it was last seen
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicePresenceTest() throws ApiException {
        String deviceId = "19da42ee01414722a6ad1224097c38d4";
        PresenceEnvelope response = api.getDevicePresence(deviceId);

        assertEquals("Sdids must match", deviceId, response.getSdid());
        
        assertNotNull("lastSeenOn", response.getData().getLastSeenOn());
        assertNotNull("connected", response.getData().getConnected());
       
    }
    
    /**
     * Get Device Token
     *
     * Retrieves a device&#39;s token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceTokenTest() throws ApiException {
        String deviceId = null;
        // DeviceTokenEnvelope response = api.getDeviceToken(deviceId);

        // TODO: test validations
    }
    
    /**
     * Update Device
     *
     * Updates a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String deviceId = null;
        Device device = null;
        // DeviceEnvelope response = api.updateDevice(deviceId, device);

        // TODO: test validations
    }
    
    /**
     * Update Device Token
     *
     * Updates a device&#39;s token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTokenTest() throws ApiException {
        String deviceId = null;
        // DeviceTokenEnvelope response = api.updateDeviceToken(deviceId);

        // TODO: test validations
    }
    
}
